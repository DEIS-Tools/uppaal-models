<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/* Global declarations */
/* Time */
const int[0, 10000000] MaxTime = 10000000;
typedef int[0, MaxTime] time_t;

const time_t MajorFrame = 17854;

clock t;    // Global clock

bool error = false;

/* Resource */
const int Resources = 2;                 // Number of resources
typedef int[0,Resources - 1] rid_t;

// Resource constants
const rid_t NONE = 0;
// CPU resource
const rid_t CPU1 = 0;
const rid_t CPU1_Q1 = CPU1;
const rid_t CPU1_Q2 = CPU1 + 1;

// Priority type
const int MaxPrio = 0;
const int MinPrio = 10;
typedef int[MaxPrio, MinPrio] prio_t;

/* Partition */
const int Partitions = 2;    // Number of partitions
typedef int[0, Partitions - 1] pid_t;

// Constants of partition ID
const pid_t P1 = 0;
const pid_t P2 = P1 + 1;

// Type of partition
typedef struct {
    rid_t cpu_id;
    rid_t rq_id;
    time_t period;
    int wind_num;
    int wind_idx;
} partition_t;

// Type of partition window
typedef struct {
    time_t offset;
    time_t duration;
} partition_window_t;

const int TotalWindowsNum = 335;
const partition_window_t partition_windows[TotalWindowsNum] = {
	// Partition 1
	{2, 35},
	{115, 35},
	{228, 35},
	{341, 35},
	{454, 35},
	{567, 35},
	{680, 35},
	{793, 35},
	{906, 35},
	{1019, 35},
	{1132, 35},
	{1245, 35},
	{1358, 35},
	{1471, 35},
	{1584, 35},
	{1697, 35},
	{1810, 35},
	{1923, 35},
	{2036, 35},
	{2149, 35},
	{2262, 35},
	{2375, 35},
	{2488, 35},
	{2601, 35},
	{2714, 35},
	{2827, 35},
	{2940, 35},
	{3053, 35},
	{3166, 35},
	{3279, 35},
	{3392, 35},
	{3505, 35},
	{3618, 35},
	{3731, 35},
	{3844, 35},
	{3957, 35},
	{4070, 35},
	{4183, 35},
	{4296, 35},
	{4409, 35},
	{4522, 35},
	{4635, 35},
	{4748, 35},
	{4861, 35},
	{4974, 35},
	{5087, 35},
	{5200, 35},
	{5313, 35},
	{5426, 35},
	{5539, 35},
	{5652, 35},
	{5765, 35},
	{5878, 35},
	{5991, 35},
	{6104, 35},
	{6217, 35},
	{6330, 35},
	{6443, 35},
	{6556, 35},
	{6669, 35},
	{6782, 35},
	{6895, 35},
	{7008, 35},
	{7121, 35},
	{7234, 35},
	{7347, 35},
	{7460, 35},
	{7573, 35},
	{7686, 35},
	{7799, 35},
	{7912, 35},
	{8025, 35},
	{8138, 35},
	{8251, 35},
	{8364, 35},
	{8477, 35},
	{8590, 35},
	{8703, 35},
	{8816, 35},
	{8929, 35},
	{9042, 35},
	{9155, 35},
	{9268, 35},
	{9381, 35},
	{9494, 35},
	{9607, 35},
	{9720, 35},
	{9833, 35},
	{9946, 35},
	{10059, 35},
	{10172, 35},
	{10285, 35},
	{10398, 35},
	{10511, 35},
	{10624, 35},
	{10737, 35},
	{10850, 35},
	{10963, 35},
	{11076, 35},
	{11189, 35},
	{11302, 35},
	{11415, 35},
	{11528, 35},
	{11641, 35},
	{11754, 35},
	{11867, 35},
	{11980, 35},
	{12093, 35},
	{12206, 35},
	{12319, 35},
	{12432, 35},
	{12545, 35},
	{12658, 35},
	{12771, 35},
	{12884, 35},
	{12997, 35},
	{13110, 35},
	{13223, 35},
	{13336, 35},
	{13449, 35},
	{13562, 35},
	{13675, 35},
	{13788, 35},
	{13901, 35},
	{14014, 35},
	{14127, 35},
	{14240, 35},
	{14353, 35},
	{14466, 35},
	{14579, 35},
	{14692, 35},
	{14805, 35},
	{14918, 35},
	{15031, 35},
	{15144, 35},
	{15257, 35},
	{15370, 35},
	{15483, 35},
	{15596, 35},
	{15709, 35},
	{15822, 35},
	{15935, 35},
	{16048, 35},
	{16161, 35},
	{16274, 35},
	{16387, 35},
	{16500, 35},
	{16613, 35},
	{16726, 35},
	{16839, 35},
	{16952, 35},
	{17065, 35},
	{17178, 35},
	{17291, 35},
	{17404, 35},
	{17517, 35},
	{17630, 35},
	{17743, 35},
	// Partition 2
	{39, 65},
	{160, 65},
	{318, 21},
	{378, 44},
	{491, 65},
	{634, 44},
	{717, 21},
	{830, 65},
	{950, 65},
	{1108, 22},
	{1169, 43},
	{1282, 65},
	{1424, 45},
	{1508, 20},
	{1621, 65},
	{1740, 65},
	{1898, 23},
	{1960, 42},
	{2073, 65},
	{2214, 46},
	{2299, 19},
	{2372, 1},
	{2412, 64},
	{2530, 65},
	{2688, 24},
	{2751, 41},
	{2864, 65},
	{3004, 47},
	{3090, 18},
	{3162, 2},
	{3203, 63},
	{3320, 65},
	{3478, 25},
	{3542, 40},
	{3655, 65},
	{3794, 48},
	{3881, 17},
	{3952, 3},
	{3994, 62},
	{4110, 65},
	{4268, 26},
	{4333, 39},
	{4446, 65},
	{4584, 49},
	{4672, 16},
	{4742, 4},
	{4785, 61},
	{4900, 65},
	{5058, 27},
	{5124, 38},
	{5237, 65},
	{5374, 50},
	{5463, 15},
	{5532, 5},
	{5576, 60},
	{5690, 65},
	{5848, 28},
	{5915, 37},
	{6028, 65},
	{6164, 51},
	{6254, 14},
	{6322, 6},
	{6367, 59},
	{6480, 65},
	{6638, 29},
	{6706, 36},
	{6819, 65},
	{6954, 52},
	{7045, 13},
	{7112, 7},
	{7158, 58},
	{7271, 65},
	{7428, 30},
	{7497, 35},
	{7610, 65},
	{7744, 53},
	{7836, 12},
	{7902, 8},
	{7949, 57},
	{8062, 65},
	{8218, 31},
	{8288, 34},
	{8401, 65},
	{8534, 54},
	{8627, 11},
	{8692, 9},
	{8740, 56},
	{8853, 65},
	{9008, 32},
	{9079, 33},
	{9192, 65},
	{9324, 55},
	{9418, 10},
	{9482, 10},
	{9531, 55},
	{9644, 65},
	{9798, 33},
	{9870, 32},
	{9983, 65},
	{10114, 56},
	{10209, 9},
	{10272, 11},
	{10322, 54},
	{10435, 65},
	{10588, 34},
	{10661, 31},
	{10774, 65},
	{10904, 57},
	{11000, 8},
	{11062, 12},
	{11113, 53},
	{11226, 65},
	{11378, 35},
	{11452, 30},
	{11565, 65},
	{11694, 58},
	{11791, 7},
	{11852, 13},
	{11904, 52},
	{12017, 65},
	{12168, 36},
	{12243, 29},
	{12356, 65},
	{12484, 59},
	{12582, 6},
	{12642, 14},
	{12695, 51},
	{12808, 65},
	{12958, 37},
	{13034, 28},
	{13147, 65},
	{13274, 60},
	{13373, 5},
	{13432, 15},
	{13486, 50},
	{13599, 65},
	{13748, 38},
	{13825, 27},
	{13938, 65},
	{14064, 61},
	{14164, 4},
	{14222, 16},
	{14277, 49},
	{14390, 65},
	{14538, 39},
	{14616, 26},
	{14729, 65},
	{14854, 62},
	{14955, 3},
	{15012, 17},
	{15068, 48},
	{15181, 65},
	{15328, 40},
	{15407, 25},
	{15520, 65},
	{15644, 63},
	{15746, 2},
	{15802, 18},
	{15859, 47},
	{15972, 65},
	{16118, 41},
	{16198, 24},
	{16311, 65},
	{16434, 64},
	{16537, 1},
	{16592, 19},
	{16650, 46},
	{16763, 65},
	{16908, 42},
	{16989, 23},
	{17102, 65},
	{17224, 65},
	{17382, 20},
	{17441, 45},
	{17554, 65},
	{17698, 43},
	{17780, 22}
};

// Partition list
const partition_t partition[Partitions] = {
    {CPU1, CPU1_Q1, 113, 158, 0},
    {CPU1, CPU1_Q2, 158, 177, 158}
};

bool in_partition[pid_t];    // Flag set after entering current partition
int perror[pid_t];    // Error flags for each partition

/* Task */
const int Tasks = 8;    // Number of tasks
typedef int[0, Tasks - 1] tid_t;
const int MaxTasks = 5;    // Maximal Number of tasks in a partition

// Type of task
typedef struct {
    //time_t minInitOffset;
    //time_t maxInitOffset;
    time_t et;
    time_t period;
    time_t deadline;
    pid_t pid;
    prio_t prio;
} task_t;

// Task list
const task_t task[tid_t] = {
    // Task11
    {8, 160, 100, P1, 1},
    // Task12
    {12, 240, 200, P1, 2},
    // Task13
    {16, 320, 300, P1, 3},
    // Task14
    {24, 480, 400, P1, 4},
    // Task21
    {8, 160, 100, P2, 1},
    // Task22
    {12, 240, 200, P2, 2},
    // Task23
    {16, 320, 300, P2, 3},
    // Task24
    {24, 480, 400, P2, 4}
};

// Type of task queue
typedef struct {
  int[0, MaxTasks + 1] len;
  tid_t list[MaxTasks + 1];
} queue_t;
queue_t rq[rid_t];    // Request queue of ready or blocked tasks

typedef int[0, 1] policy_t;    // Scheduling policy
const policy_t FIFO = 0;    // First in first out
const policy_t FP = 1;    // Fixed priority

// Current priority of tasks
prio_t cprio[tid_t];

/* Channel */
broadcast chan enter_partition[pid_t], exit_partition[pid_t];
broadcast chan ready[tid_t];
broadcast chan sched[tid_t];
broadcast chan stop[tid_t];
broadcast chan release[pid_t][tid_t];

/* Global functions */
void _enque(rid_t rid, tid_t tid, int start, policy_t policy){
    if(policy == FIFO)
        rq[rid].list[rq[rid].len++] = tid;
    if(policy == FP){
        tid_t tmp;
        rq[rid].list[rq[rid].len++] = tid;
        if (rq[rid].len &gt; 1){
            int i = rq[rid].len - 1;
            while(i &gt; start &amp;&amp; cprio[rq[rid].list[i]] &lt; cprio[rq[rid].list[i - 1]]){
                tmp = rq[rid].list[i - 1];
                rq[rid].list[i - 1] = rq[rid].list[i];
                rq[rid].list[i] = tmp;
                i--;
            }
        }
    }
}

void _deque(rid_t rid, tid_t tid){
    int[0, Tasks] i;
    bool find = false;

    for(i = 0; i &lt; rq[rid].len; i++) {    
        if(find)
            rq[rid].list[i - 1] = rq[rid].list[i];
        if(!find &amp;&amp; rq[rid].list[i] == tid)
            find = true;
    }

    if(find) {
        rq[rid].list[rq[rid].len - 1] = 0;
        rq[rid].len--;
    }
}

tid_t _front(rid_t rid){
    return rq[rid].list[0];
}

void setError(pid_t pid){
    error = true;
    perror[pid] = 1;
}</declaration>
	<template>
		<name>PartitionScheduler</name>
		<parameter>pid_t pid</parameter>
		<declaration>clock x;

int[0, TotalWindowsNum] wind;

time_t windStart(int[0, TotalWindowsNum] win){
    if(win &lt; partition[pid].wind_num)
        return partition_windows[partition[pid].wind_idx + win].offset;
    else
        return MajorFrame + 1;
}

time_t windEnd(int[0, TotalWindowsNum - 1] win){
    return partition_windows[partition[pid].wind_idx + win].offset
                + partition_windows[partition[pid].wind_idx + win].duration;
}</declaration>
		<location id="id0" x="-255" y="-425">
			<name x="-265" y="-459">Init</name>
			<committed/>
		</location>
		<location id="id1" x="-255" y="-323">
			<name x="-265" y="-357">OutOfPartition</name>
			<label kind="invariant" x="-314" y="-306">x &lt;= windStart(wind)
&amp;&amp; x &lt;= MajorFrame</label>
		</location>
		<location id="id2" x="59" y="-323">
			<name x="49" y="-357">InPartition</name>
			<label kind="invariant" x="76" y="-340">x &lt;= windEnd(wind)
&amp;&amp; x &lt;= MajorFrame</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="59" y="-425">x &gt;= MajorFrame</label>
			<label kind="synchronisation" x="59" y="-408">exit_partition[pid]!</label>
			<label kind="assignment" x="59" y="-391">in_partition[pid] = false,
x = 0, wind = 0</label>
			<nail x="59" y="-425"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-382" y="-340">x &gt;= MajorFrame</label>
			<label kind="assignment" x="-382" y="-323">x = 0, wind = 0</label>
			<nail x="-399" y="-323"/>
			<nail x="-399" y="-425"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-161" y="-273">x &gt;= windEnd(wind)
&amp;&amp; x &lt; MajorFrame</label>
			<label kind="synchronisation" x="-161" y="-239">exit_partition[pid]!</label>
			<label kind="assignment" x="-161" y="-222">in_partition[pid] = false, wind++</label>
			<nail x="59" y="-222"/>
			<nail x="-255" y="-222"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-161" y="-340">x &gt;= windStart(wind)</label>
			<label kind="synchronisation" x="-161" y="-323">enter_partition[pid]!</label>
			<label kind="assignment" x="-161" y="-306">in_partition[pid] = true</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-161" y="-408">x &gt;= windStart(wind)</label>
			<label kind="synchronisation" x="-161" y="-391">enter_partition[pid]!</label>
			<label kind="assignment" x="-161" y="-374">in_partition[pid] = true</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-297" y="-391">x &lt; windStart(wind)</label>
		</transition>
	</template>
	<template>
		<name>TaskScheduler</name>
		<parameter>pid_t pid</parameter>
		<declaration>tid_t running = 0;    // Running task

void resetRunning() { running = 0; }

void enque(tid_t tid){
    _enque(partition[pid].rq_id, tid, 0, FP);
}

void deque(tid_t tid){
    _deque(partition[pid].rq_id, tid);
}

tid_t front(){
    return _front(partition[pid].rq_id);
}

int[0, MaxTasks] rqLen() { return rq[partition[pid].rq_id].len; }

pid_t partition(tid_t tid) { return task[tid].pid; }</declaration>
		<location id="id3" x="-323" y="42">
			<name x="-333" y="8">Clear</name>
			<committed/>
		</location>
		<location id="id4" x="-204" y="-238">
			<name x="-263" y="-263">NoTask</name>
		</location>
		<location id="id5" x="459" y="-85">
			<name x="449" y="-119">Release</name>
			<committed/>
		</location>
		<location id="id6" x="-204" y="42">
			<name x="-221" y="8">WaitPartition</name>
		</location>
		<location id="id7" x="-59" y="204">
			<name x="-69" y="170">Interrupt</name>
			<committed/>
		</location>
		<location id="id8" x="102" y="-85">
			<name x="92" y="-119">Preempt</name>
			<committed/>
		</location>
		<location id="id9" x="297" y="136">
			<name x="289" y="102">Occupied</name>
		</location>
		<location id="id10" x="297" y="-85">
			<name x="287" y="-119">Schedule</name>
			<committed/>
		</location>
		<location id="id11" x="297" y="-238">
			<name x="287" y="-272">Idle</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="-306" y="25">rqLen() != 0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-314" y="-238">rqLen() == 0</label>
			<nail x="-323" y="-238"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="select" x="-204" y="-204">n:tid_t</label>
			<label kind="guard" x="-204" y="-187">partition(n) == pid</label>
			<label kind="synchronisation" x="-204" y="-170">ready[n]?</label>
			<label kind="assignment" x="-204" y="-153">enque(n)</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-26" y="-306">enter_partition[pid]?</label>
			<nail x="-170" y="-289"/>
			<nail x="255" y="-289"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-26" y="-255">exit_partition[pid]?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id11"/>
			<label kind="guard" x="340" y="-255">rqLen() == 0</label>
			<nail x="459" y="-238"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="select" x="-229" y="68">n:tid_t</label>
			<label kind="guard" x="-229" y="85">partition(n) == pid</label>
			<label kind="synchronisation" x="-229" y="102">ready[n]?</label>
			<label kind="assignment" x="-229" y="119">enque(n)</label>
			<nail x="-272" y="136"/>
			<nail x="-136" y="136"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-306" y="187">stop[running]!</label>
			<label kind="assignment" x="-306" y="204">deque(running), resetRunning()</label>
			<nail x="-323" y="204"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-26" y="-162">enter_partition[pid]?</label>
			<nail x="-51" y="-144"/>
			<nail x="246" y="-145"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-25" y="187">exit_partition[pid]?</label>
			<nail x="297" y="204"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id10"/>
			<label kind="guard" x="340" y="-102">rqLen() != 0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id5"/>
			<label kind="select" x="331" y="119">n: tid_t</label>
			<label kind="synchronisation" x="331" y="136">release[pid][n]?</label>
			<label kind="assignment" x="331" y="153">deque(n),
resetRunning()</label>
			<nail x="459" y="136"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="select" x="144" y="-17">n:tid_t</label>
			<label kind="guard" x="144" y="0">partition(n) == pid</label>
			<label kind="synchronisation" x="145" y="17">ready[n]?</label>
			<label kind="assignment" x="145" y="34">enque(n)</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="145" y="119">running == front()</label>
			<nail x="102" y="136"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="guard" x="145" y="-102">running != front()</label>
			<label kind="synchronisation" x="145" y="-85">stop[running]!</label>
			<label kind="assignment" x="145" y="-68">deque(running),
resetRunning()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="297" y="0">sched[front()]!</label>
			<label kind="assignment" x="297" y="17">running = front()</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="select" x="297" y="-204">n:tid_t</label>
			<label kind="guard" x="297" y="-187">partition(n) == pid</label>
			<label kind="synchronisation" x="297" y="-170">ready[n]?</label>
			<label kind="assignment" x="297" y="-153">enque(n)</label>
		</transition>
	</template>
	<template>
		<name>Task</name>
		<parameter>tid_t tid</parameter>
		<declaration>clock curTime, exeTime;

//time_t minInitOffset() { return task[tid].minInitOffset; }
//time_t maxInitOffset() { return task[tid].maxInitOffset; }
time_t period() { return task[tid].period; }
time_t execTime() { return task[tid].et; }
time_t deadline() { return task[tid].deadline; }
pid_t pid() { return task[tid].pid; }
prio_t prio() { return task[tid].prio; }</declaration>
		<location id="id12" x="-561" y="-399">
			<urgent/>
		</location>
		<location id="id13" x="-399" y="-552">
			<urgent/>
		</location>
		<location id="id14" x="-722" y="-467">
			<name x="-732" y="-501">Ready</name>
			<label kind="invariant" x="-799" y="-450">exeTime' == 0
&amp;&amp; curTime &lt;= deadline()</label>
		</location>
		<location id="id15" x="-722" y="-323">
			<name x="-732" y="-357">WaitNextRelease</name>
			<label kind="invariant" x="-732" y="-306">curTime &lt;= period()</label>
		</location>
		<location id="id16" x="-399" y="-467">
			<name x="-409" y="-501">Running</name>
			<label kind="invariant" x="-409" y="-450">exeTime &lt;= execTime()
&amp;&amp; curTime &lt;= deadline()</label>
		</location>
		<location id="id17" x="-561" y="-246">
			<name x="-571" y="-280">MissDeadline</name>
		</location>
		<location id="id18" x="-561" y="-170">
			<committed/>
		</location>
		<location id="id19" x="-722" y="-552">
			<name x="-732" y="-586">Init</name>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="guard" x="-603" y="-450">exeTime &lt; execTime()</label>
			<label kind="synchronisation" x="-603" y="-433">ready[tid]!</label>
			<nail x="-561" y="-433"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id15"/>
			<label kind="guard" x="-603" y="-382">exeTime &gt;= execTime()</label>
			<nail x="-561" y="-365"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-603" y="-569">enter_partition[pid()]?</label>
			<label kind="assignment" x="-603" y="-552">cprio[tid] = prio()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-603" y="-527">ready[tid]!</label>
			<label kind="assignment" x="-603" y="-510">curTime = 0, exeTime = 0</label>
			<nail x="-399" y="-510"/>
			<nail x="-722" y="-510"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-722" y="-212">release[pid()][tid]!</label>
			<nail x="-595" y="-195"/>
			<nail x="-595" y="-221"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-518" y="-212">sched[tid]?</label>
			<nail x="-527" y="-221"/>
			<nail x="-527" y="-195"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-476" y="-263">curTime &gt;= deadline()</label>
			<label kind="synchronisation" x="-476" y="-246">release[pid()][tid]!</label>
			<label kind="assignment" x="-476" y="-229">setError(pid())</label>
			<nail x="-289" y="-467"/>
			<nail x="-289" y="-246"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id17"/>
			<label kind="guard" x="-765" y="-263">curTime &gt;= deadline()</label>
			<label kind="assignment" x="-765" y="-246">setError(pid())</label>
			<nail x="-841" y="-467"/>
			<nail x="-841" y="-246"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-527" y="-416">stop[tid]?</label>
			<nail x="-442" y="-399"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-799" y="-408">curTime &gt;= period()</label>
			<label kind="synchronisation" x="-799" y="-395">ready[tid]!</label>
			<label kind="assignment" x="-799" y="-378">curTime = 0, exeTime = 0</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-637" y="-340">exeTime &gt;= execTime()</label>
			<label kind="synchronisation" x="-603" y="-323">release[pid()][tid]!</label>
			<nail x="-399" y="-323"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-603" y="-484">sched[tid]?</label>
		</transition>
	</template>
	<system>/* Template instantiations */
// Partition Schedulers
ps1 = PartitionScheduler(P1);
ps2 = PartitionScheduler(P2);

// Task Schedulers
ts1 = TaskScheduler(P1);
ts2 = TaskScheduler(P2);

// Tasks of partition 1
task11 = Task(0); task12 = Task(1); task13 = Task(2); task14 = Task(3);
// Tasks of partition 2
task21 = Task(4); task22 = Task(5); task23 = Task(6); task24 = Task(7);

/* Processes */
system
ps1, ps2,
ts1, ts2,
task11, task12, task13, task14,
task21, task22, task23, task24;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; error</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
