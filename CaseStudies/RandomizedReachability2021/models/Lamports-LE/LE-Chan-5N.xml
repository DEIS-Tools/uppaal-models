<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//Insert declarations of global clocks, variables, constants and channels.

const int N = 5;
const int M = 300;
const int MDELAY = 3;
const int TDELAY = 5;
const int TO = 10;

clock time;

typedef int[0,N-1] id_t;
typedef int[0,M-1] id_m_t;
typedef struct
{
  id_t src;
  id_t dst;
  id_t leader;
  int[0,N*100] hops;
} msg_t;

void setMsg(msg_t &amp;msg, id_t src, id_t dst, id_t leader, int[0,N*100] hops)
{
  msg.src = src;
  msg.dst = dst;
  msg.leader = leader;
  msg.hops = hops;
}

chan send;
chan receive[N];
msg_t shared;

const int link[N][N] = {
  { 0,1,1,1,1 },
  { 1,0,1,1,1 },
  { 1,1,0,1,1 },
  { 1,1,1,0,1 },
  { 1,1,1,1,0 }
};

void reset(msg_t &amp;msg)
{
  msg.src = msg.dst = msg.leader = msg.hops = 0;
}

bool used[M];</declaration>
	<template>
		<name x="5" y="5">Message</name>
		<parameter>const id_m_t id</parameter>
		<declaration>//Insert local declarations of clocks, variables and constants.

clock x;
msg_t msg;

bool mayUse()
{
  int i = 0;
  while (i &lt; id)
  {
    if(!used[i])
      return false;
    i++;
  }
  return true;
}</declaration>
		<location id="id0" x="272" y="112">
			<label kind="invariant" x="224" y="72">x &lt;= MDELAY</label>
		</location>
		<location id="id1" x="272" y="288">
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="336" y="184">receive[msg.dst]!</label>
			<label kind="assignment" x="336" y="208">shared = msg,
reset(msg),
used[id] = false</label>
			<nail x="328" y="112"/>
			<nail x="328" y="288"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="88" y="160">mayUse()</label>
			<label kind="synchronisation" x="88" y="176">send?</label>
			<label kind="assignment" x="88" y="192">x = 0,
msg = shared,
reset(shared),
used[id] = true</label>
			<nail x="208" y="288"/>
			<nail x="208" y="112"/>
		</transition>
	</template>
	<template>
		<name>Node</name>
		<parameter>const int id</parameter>
		<declaration>
id_t leader = id;
int[0,N*100] hops;
clock x;
int[0,N] i;
id_t src;

void set(id_t l, int[0,N*100] h)
{
  leader = l;
  hops = h;
}

int[0,N] next(int[0,N] i,int[0,N] src)
{
  while (i  &lt; N &amp;&amp; (!link[id][i] || i == src))
  {
    i++;
  }
  return i;
}

int[0,1000] timeout()
{
  if (hops &gt; 0)
    return TO + TDELAY + hops * MDELAY;
  return TO;
}

bool worse(const msg_t &amp;msg)
{ 
  return msg.leader &gt; leader || msg.leader == leader &amp;&amp; msg.hops &gt; hops;
}</declaration>
		<location id="id2" x="360" y="400">
			<committed/>
		</location>
		<location id="id3" x="168" y="400">
			<committed/>
		</location>
		<location id="id4" x="168" y="96">
			<committed/>
		</location>
		<location id="id5" x="168" y="256">
			<label kind="invariant" x="-8" y="248">x &lt;= timeout() + TDELAY</label>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="240" y="232">i == N</label>
			<label kind="assignment" x="288" y="232">i = src = 0</label>
			<nail x="360" y="256"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="424" y="344">i &lt; N</label>
			<label kind="synchronisation" x="416" y="360">send!</label>
			<label kind="assignment" x="416" y="376">setMsg(shared, id, i, leader, hops),
i = next(i+1, src)</label>
			<nail x="408" y="344"/>
			<nail x="408" y="400"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="208" y="400">!worse(shared)</label>
			<label kind="assignment" x="208" y="416">src = shared.src,
set(shared.leader, shared.hops + 1),
i = next(0, src),
x = 0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="176" y="296">worse(shared)</label>
			<label kind="assignment" x="176" y="312">reset(shared)</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="24" y="304">receive[id]?</label>
			<nail x="112" y="288"/>
			<nail x="112" y="400"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="240" y="120">i == N</label>
			<label kind="assignment" x="240" y="144">i = 0</label>
			<nail x="232" y="96"/>
			<nail x="232" y="232"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="112" y="-24">i &lt; N</label>
			<label kind="synchronisation" x="112" y="-8">send!</label>
			<label kind="assignment" x="112" y="8">setMsg(shared, id, i, leader, hops),
i = next(i + 1, N)</label>
			<nail x="120" y="48"/>
			<nail x="208" y="48"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="16" y="152">x &gt; timeout()</label>
			<label kind="assignment" x="16" y="168">set(id, 0),
i = next(0, N),
x = 0</label>
			<nail x="112" y="216"/>
			<nail x="112" y="96"/>
		</transition>
	</template>
	<system>//Insert process assignments.

N0 = Node(0);
N1 = Node(1);
N2 = Node(2);
N3 = Node(3);
N4 = Node(4);

M0 = Message(0);
M1 = Message(1);
M2 = Message(2);
M3 = Message(3);
M4 = Message(4);
M5 = Message(5);
M6 = Message(6);
M7 = Message(7);
M8 = Message(8);
M9 = Message(9);
M10 = Message(10);
M11 = Message(11);
M12 = Message(12);
M13 = Message(13);
M14 = Message(14);
M15 = Message(15);
M16 = Message(16);
M17 = Message(17);
M18 = Message(18);
M19 = Message(19);
M20 = Message(20);
M21 = Message(21);
M22 = Message(22);
M23 = Message(23);
M24 = Message(24);
M25 = Message(25);
M26 = Message(26);
M27 = Message(27);
M28 = Message(28);
M29 = Message(29);
M30 = Message(30);
M31 = Message(31);
M32 = Message(32);
M33 = Message(33);
M34 = Message(34);
M35 = Message(35);
M36 = Message(36);
M37 = Message(37);
M38 = Message(38);
M39 = Message(39);
M40 = Message(40);
M41 = Message(41);
M42 = Message(42);
M43 = Message(43);
M44 = Message(44);
M45 = Message(45);
M46 = Message(46);
M47 = Message(47);
M48 = Message(48);
M49 = Message(49);
M50 = Message(50);
M51 = Message(51);
M52 = Message(52);
M53 = Message(53);
M54 = Message(54);
M55 = Message(55);
M56 = Message(56);
M57 = Message(57);
M58 = Message(58);
M59 = Message(59);
M60 = Message(60);
M61 = Message(61);
M62 = Message(62);
M63 = Message(63);
M64 = Message(64);
M65 = Message(65);
M66 = Message(66);
M67 = Message(67);
M68 = Message(68);
M69 = Message(69);


//Edit system definition.
system N0, N1, N2, N3, N4, Message;









</system>
	<queries>
		<query>
			<formula>E&lt;&gt; used[M-1] == true</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
